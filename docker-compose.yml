version: '3.8'

services:
  node:
    build:
      context: ./node
    container_name: node
    ports:
      - "8080:4785"
    networks:
      - starnet
    volumes:
      - ./node:/node

  postgres_server:
    image: postgres:alpine
    container_name: postgres_server
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: metrics_db
    ports:
      - "8082:5432"
    networks:
      - starnet
    volumes:
      - postgres_data:/var/lib/postgresql/data

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:admin@postgres_server:5432/metrics_db"
    ports:
      - "9187:9187"
    depends_on:
      - postgres_server  # Ensures postgres_exporter starts after postgres_server
    networks:
      - starnet

  client:
    build:
      context: ./client
    container_name: client
    ports:
      - "8081:8777"
    networks:
      - starnet
    volumes:
      - ./client:/client

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
    ports:
      - "9090:9090"
    networks:
      - starnet
    depends_on:
      - postgres_exporter
      - client

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - starnet
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus  # Ensure Grafana starts after Prometheus is ready
    healthcheck:
      test: ["CMD", "curl", "-f", "http://prometheus:9090"]
      interval: 30s
      retries: 3

networks:
  starnet:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local
